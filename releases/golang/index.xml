<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tom's Notebook â€“ Go Release Notes</title><link>/releases/golang/</link><description>Recent content in Go Release Notes on Tom's Notebook</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 15 Mar 2022 14:46:59 +0000</lastBuildDate><atom:link href="/releases/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Releases: Go 1.18 Release Notes</title><link>/releases/golang/1-18/</link><pubDate>Tue, 15 Mar 2022 14:46:59 +0000</pubDate><guid>/releases/golang/1-18/</guid><description>
&lt;h2 id="introduction-to-go-118">Introduction to Go 1.18&lt;/h2>
&lt;p>The latest Go release, version 1.18, is a significant release, including changes to the language, implementation of the toolchain, runtime, and libraries. Go 1.18 arrives seven months after &lt;a href="https://go.dev/doc/go1.17">Go 1.17&lt;/a>. As always, the release maintains the Go 1 &lt;a href="https://go.dev/doc/go1compat">promise of compatibility&lt;/a>. We expect almost all Go programs to continue to compile and run as before.&lt;/p>
&lt;h2 id="changes-to-the-language">Changes to the language&lt;/h2>
&lt;h3 id="generics">Generics&lt;/h3>
&lt;p>Go 1.18 includes an implementation of generic features as described by the &lt;a href="https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md">Type Parameters Proposal&lt;/a>. This includes major - but fully backward-compatible - changes to the language.&lt;/p>
&lt;p>These new language changes required a large amount of new code that has not had significant testing in production settings. That will only happen as more people write and use generic code. We believe that this feature is well implemented and high quality. However, unlike most aspects of Go, we can&amp;rsquo;t back up that belief with real world experience. Therefore, while we encourage the use of generics where it makes sense, please use appropriate caution when deploying generic code in production.&lt;/p>
&lt;p>While we believe that the new language features are well designed and clearly specified, it is possible that we have made mistakes. We want to stress that the &lt;a href="https://go.dev/doc/go1compat">Go 1 compatibility guarantee&lt;/a> says &amp;ldquo;If it becomes necessary to address an inconsistency or incompleteness in the specification, resolving the issue could affect the meaning or legality of existing programs. We reserve the right to address such issues, including updating the implementations.&amp;rdquo; It also says &amp;ldquo;If a compiler or library has a bug that violates the specification, a program that depends on the buggy behavior may break if the bug is fixed. We reserve the right to fix such bugs.&amp;rdquo; In other words, it is possible that there will be code using generics that will work with the 1.18 release but break in later releases. We do not plan or expect to make any such change. However, breaking 1.18 programs in future releases may become necessary for reasons that we cannot today foresee. We will minimize any such breakage as much as possible, but we can&amp;rsquo;t guarantee that the breakage will be zero.&lt;/p>
&lt;p>The following is a list of the most visible changes. For a more comprehensive overview, see the &lt;a href="https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md">proposal&lt;/a>. For details see the &lt;a href="https://go.dev/ref/spec">language spec&lt;/a>.&lt;/p>
&lt;ul>
&lt;li>The syntax for &lt;a href="https://go.dev/ref/spec#Function_declarations">function&lt;/a> and &lt;a href="https://go.dev/ref/spec#Type_declarations">type declarations&lt;/a> now accepts &lt;a href="https://go.dev/ref/spec#Type_parameter_declarations">type parameters&lt;/a>.&lt;/li>
&lt;li>Parameterized functions and types can be instantiated by following them with a list of type arguments in square brackets.&lt;/li>
&lt;li>The new token &lt;code>~&lt;/code> has been added to the set of &lt;a href="https://go.dev/ref/spec#Operators_and_punctuation">operators and punctuation&lt;/a>.&lt;/li>
&lt;li>The syntax for &lt;a href="https://go.dev/ref/spec#Interface_types">Interface types&lt;/a> now permits the embedding of arbitrary types (not just type names of interfaces) as well as union and &lt;code>~T&lt;/code> type elements. Such interfaces may only be used as type constraints. An interface now defines a set of types as well as a set of methods.&lt;/li>
&lt;li>The new &lt;a href="https://go.dev/ref/spec#Predeclared_identifiers">predeclared identifier&lt;/a> &lt;code>any&lt;/code> is an alias for the empty interface. It may be used instead of &lt;code>interface{}&lt;/code>.&lt;/li>
&lt;li>The new &lt;a href="https://go.dev/ref/spec#Predeclared_identifiers">predeclared identifier&lt;/a> &lt;code>comparable&lt;/code> is an interface that denotes the set of all types which can be compared using &lt;code>==&lt;/code> or &lt;code>!=&lt;/code>. It may only be used as (or embedded in) a type constraint.&lt;/li>
&lt;/ul>
&lt;p>There are three experimental packages using generics that may be useful. These packages are in x/exp repository; their API is not covered by the Go 1 guarantee and may change as we gain more experience with generics.&lt;/p>
&lt;p>&lt;a href="https://pkg.go.dev/golang.org/x/exp/constraints">&lt;code>golang.org/x/exp/constraints&lt;/code>&lt;/a>&lt;/p>
&lt;p>Constraints that are useful for generic code, such as &lt;a href="https://pkg.go.dev/golang.org/x/exp/constraints#Ordered">&lt;code>constraints.Ordered&lt;/code>&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://pkg.go.dev/golang.org/x/exp/slices">&lt;code>golang.org/x/exp/slices&lt;/code>&lt;/a>&lt;/p>
&lt;p>A collection of generic functions that operate on slices of any element type.&lt;/p>
&lt;p>&lt;a href="https://pkg.go.dev/golang.org/x/exp/maps">&lt;code>golang.org/x/exp/maps&lt;/code>&lt;/a>&lt;/p>
&lt;p>A collection of generic functions that operate on maps of any key or element type.&lt;/p>
&lt;p>The current generics implementation has the following known limitations:&lt;/p>
&lt;ul>
&lt;li>The Go compiler cannot handle type declarations inside generic functions or methods. We hope to provide support for this feature in a future release.&lt;/li>
&lt;li>The Go compiler does not accept arguments of type parameter type with the predeclared functions &lt;code>real&lt;/code>, &lt;code>imag&lt;/code>, and &lt;code>complex&lt;/code>. We hope to remove this restriction in a future release.&lt;/li>
&lt;li>The Go compiler only supports calling a method &lt;code>m&lt;/code> on a value &lt;code>x&lt;/code> of type parameter type &lt;code>P&lt;/code> if &lt;code>m&lt;/code> is explicitly declared by &lt;code>P&lt;/code>&amp;rsquo;s constraint interface. Similarly, method values &lt;code>x.m&lt;/code> and method expressions &lt;code>P.m&lt;/code> also are only supported if &lt;code>m&lt;/code> is explicitly declared by &lt;code>P&lt;/code>, even though &lt;code>m&lt;/code> might be in the method set of &lt;code>P&lt;/code> by virtue of the fact that all types in &lt;code>P&lt;/code> implement &lt;code>m&lt;/code>. We hope to remove this restriction in a future release.&lt;/li>
&lt;li>The Go compiler does not support accessing a struct field &lt;code>x.f&lt;/code> where &lt;code>x&lt;/code> is of type parameter type even if all types in the type parameter&amp;rsquo;s type set have a field &lt;code>f&lt;/code>. We may remove this restriction in a future release.&lt;/li>
&lt;li>Embedding a type parameter, or a pointer to a type parameter, as an unnamed field in a struct type is not permitted. Similarly, embedding a type parameter in an interface type is not permitted. Whether these will ever be permitted is unclear at present.&lt;/li>
&lt;li>A union element with more than one term may not contain an interface type with a non-empty method set. Whether this will ever be permitted is unclear at present.&lt;/li>
&lt;/ul>
&lt;p>Generics also represent a large change for the Go ecosystem. While we have updated several core tools with generics support, there is much more to do. It will take time for remaining tools, documentation, and libraries to catch up with these language changes.&lt;/p>
&lt;h3 id="bug-fixes">Bug fixes&lt;/h3>
&lt;p>The Go 1.18 compiler now correctly reports &lt;code>declared but not used&lt;/code> errors for variables that are set inside a function literal but are never used. Before Go 1.18, the compiler did not report an error in such cases. This fixes long-outstanding compiler issue &lt;a href="https://golang.org/issue/8560">#8560&lt;/a>. As a result of this change, (possibly incorrect) programs may not compile anymore. The necessary fix is straightforward: fix the program if it was in fact incorrect, or use the offending variable, for instance by assigning it to the blank identifier &lt;code>_&lt;/code>. Since &lt;code>go vet&lt;/code> always pointed out this error, the number of affected programs is likely very small.&lt;/p>
&lt;p>The Go 1.18 compiler now reports an overflow when passing a rune constant expression such as &lt;code>'1' &amp;lt;&amp;lt; 32&lt;/code> as an argument to the predeclared functions &lt;code>print&lt;/code> and &lt;code>println&lt;/code>, consistent with the behavior of user-defined functions. Before Go 1.18, the compiler did not report an error in such cases but silently accepted such constant arguments if they fit into an &lt;code>int64&lt;/code>. As a result of this change, (possibly incorrect) programs may not compile anymore. The necessary fix is straightforward: fix the program if it was in fact incorrect, or explicitly convert the offending argument to the correct type. Since &lt;code>go vet&lt;/code> always pointed out this error, the number of affected programs is likely very small.&lt;/p>
&lt;h2 id="ports">Ports&lt;/h2>
&lt;h3 id="amd64">AMD64&lt;/h3>
&lt;p>Go 1.18 introduces the new &lt;code>GOAMD64&lt;/code> environment variable, which selects at compile time a minimum target version of the AMD64 architecture. Allowed values are &lt;code>v1&lt;/code>, &lt;code>v2&lt;/code>, &lt;code>v3&lt;/code>, or &lt;code>v4&lt;/code>. Each higher level requires, and takes advantage of, additional processor features. A detailed description can be found &lt;a href="https://golang.org/wiki/MinimumRequirements#amd64">here&lt;/a>.&lt;/p>
&lt;p>The &lt;code>GOAMD64&lt;/code> environment variable defaults to &lt;code>v1&lt;/code>.&lt;/p>
&lt;h3 id="risc-v">RISC-V&lt;/h3>
&lt;p>The 64-bit RISC-V architecture on Linux (the &lt;code>linux/riscv64&lt;/code> port) now supports the &lt;code>c-archive&lt;/code> and &lt;code>c-shared&lt;/code> build modes.&lt;/p>
&lt;h3 id="linux">Linux&lt;/h3>
&lt;p>Go 1.18 requires Linux kernel version 2.6.32 or later.&lt;/p>
&lt;h3 id="windows">Windows&lt;/h3>
&lt;p>The &lt;code>windows/arm&lt;/code> and &lt;code>windows/arm64&lt;/code> ports now support non-cooperative preemption, bringing that capability to all four Windows ports, which should hopefully address subtle bugs encountered when calling into Win32 functions that block for extended periods of time.&lt;/p>
&lt;h3 id="ios">iOS&lt;/h3>
&lt;p>On iOS (the &lt;code>ios/arm64&lt;/code> port) and iOS simulator running on AMD64-based macOS (the &lt;code>ios/amd64&lt;/code> port), Go 1.18 now requires iOS 12 or later; support for previous versions has been discontinued.&lt;/p>
&lt;h3 id="freebsd">FreeBSD&lt;/h3>
&lt;p>Go 1.18 is the last release that is supported on FreeBSD 11.x, which has already reached end-of-life. Go 1.19 will require FreeBSD 12.2+ or FreeBSD 13.0+. FreeBSD 13.0+ will require a kernel with the COMPAT_FREEBSD12 option set (this is the default).&lt;/p>
&lt;h2 id="tools">Tools&lt;/h2>
&lt;h3 id="fuzzing">Fuzzing&lt;/h3>
&lt;p>Go 1.18 includes an implementation of fuzzing as described by &lt;a href="https://golang.org/issue/44551">the fuzzing proposal&lt;/a>.&lt;/p>
&lt;p>See the &lt;a href="https://go.dev/doc/fuzz">fuzzing landing page&lt;/a> to get started.&lt;/p>
&lt;p>Please be aware that fuzzing can consume a lot of memory and may impact your machineâ€™s performance while it runs. Also be aware that the fuzzing engine writes values that expand test coverage to a fuzz cache directory within &lt;code>$GOCACHE/fuzz&lt;/code> while it runs. There is currently no limit to the number of files or total bytes that may be written to the fuzz cache, so it may occupy a large amount of storage (possibly several GBs).&lt;/p>
&lt;h3 id="go-command">Go command&lt;/h3>
&lt;h4 id="go-get">&lt;code>go&lt;/code> &lt;code>get&lt;/code>&lt;/h4>
&lt;p>&lt;code>go&lt;/code> &lt;code>get&lt;/code> no longer builds or installs packages in module-aware mode. &lt;code>go&lt;/code> &lt;code>get&lt;/code> is now dedicated to adjusting dependencies in &lt;code>go.mod&lt;/code>. Effectively, the &lt;code>-d&lt;/code> flag is always enabled. To install the latest version of an executable outside the context of the current module, use &lt;a href="https://golang.org/ref/mod#go-install">&lt;code>go&lt;/code> &lt;code>install&lt;/code> &lt;code>example.com/cmd@latest&lt;/code>&lt;/a>. Any &lt;a href="https://golang.org/ref/mod#version-queries">version query&lt;/a> may be used instead of &lt;code>latest&lt;/code>. This form of &lt;code>go&lt;/code> &lt;code>install&lt;/code> was added in Go 1.16, so projects supporting older versions may need to provide install instructions for both &lt;code>go&lt;/code> &lt;code>install&lt;/code> and &lt;code>go&lt;/code> &lt;code>get&lt;/code>. &lt;code>go&lt;/code> &lt;code>get&lt;/code> now reports an error when used outside a module, since there is no &lt;code>go.mod&lt;/code> file to update. In GOPATH mode (with &lt;code>GO111MODULE=off&lt;/code>), &lt;code>go&lt;/code> &lt;code>get&lt;/code> still builds and installs packages, as before.&lt;/p>
&lt;h4 id="automatic-gomod-and-gosum-updates">Automatic &lt;code>go.mod&lt;/code> and &lt;code>go.sum&lt;/code> updates&lt;/h4>
&lt;p>The &lt;code>go&lt;/code> &lt;code>mod&lt;/code> &lt;code>graph&lt;/code>, &lt;code>go&lt;/code> &lt;code>mod&lt;/code> &lt;code>vendor&lt;/code>, &lt;code>go&lt;/code> &lt;code>mod&lt;/code> &lt;code>verify&lt;/code>, and &lt;code>go&lt;/code> &lt;code>mod&lt;/code> &lt;code>why&lt;/code> subcommands no longer automatically update the &lt;code>go.mod&lt;/code> and &lt;code>go.sum&lt;/code> files. (Those files can be updated explicitly using &lt;code>go&lt;/code> &lt;code>get&lt;/code>, &lt;code>go&lt;/code> &lt;code>mod&lt;/code> &lt;code>tidy&lt;/code>, or &lt;code>go&lt;/code> &lt;code>mod&lt;/code> &lt;code>download&lt;/code>.)&lt;/p>
&lt;h4 id="go-version">&lt;code>go&lt;/code> &lt;code>version&lt;/code>&lt;/h4>
&lt;p>The &lt;code>go&lt;/code> command now embeds version control information in binaries. It includes the currently checked-out revision, commit time, and a flag indicating whether edited or untracked files are present. Version control information is embedded if the &lt;code>go&lt;/code> command is invoked in a directory within a Git, Mercurial, Fossil, or Bazaar repository, and the &lt;code>main&lt;/code> package and its containing main module are in the same repository. This information may be omitted using the flag &lt;code>-buildvcs=false&lt;/code>.&lt;/p>
&lt;p>Additionally, the &lt;code>go&lt;/code> command embeds information about the build, including build and tool tags (set with &lt;code>-tags&lt;/code>), compiler, assembler, and linker flags (like &lt;code>-gcflags&lt;/code>), whether cgo was enabled, and if it was, the values of the cgo environment variables (like &lt;code>CGO_CFLAGS&lt;/code>). Both VCS and build information may be read together with module information using &lt;code>go&lt;/code> &lt;code>version&lt;/code> &lt;code>-m&lt;/code> &lt;code>file&lt;/code> or &lt;code>runtime/debug.ReadBuildInfo&lt;/code> (for the currently running binary) or the new &lt;a href="https://go.dev/doc/go1.18#debug/buildinfo">&lt;code>debug/buildinfo&lt;/code>&lt;/a> package.&lt;/p>
&lt;p>The underlying data format of the embedded build information can change with new go releases, so an older version of &lt;code>go&lt;/code> may not handle the build information produced with a newer version of &lt;code>go&lt;/code>. To read the version information from a binary built with &lt;code>go&lt;/code> 1.18, use the &lt;code>go&lt;/code> &lt;code>version&lt;/code> command and the &lt;code>debug/buildinfo&lt;/code> package from &lt;code>go&lt;/code> 1.18+.&lt;/p>
&lt;h4 id="go-mod-download">&lt;code>go&lt;/code> &lt;code>mod&lt;/code> &lt;code>download&lt;/code>&lt;/h4>
&lt;p>If the main module&amp;rsquo;s &lt;code>go.mod&lt;/code> file specifies &lt;a href="https://go.dev/ref/mod#go-mod-file-go">&lt;code>go&lt;/code> &lt;code>1.17&lt;/code>&lt;/a> or higher, &lt;code>go&lt;/code> &lt;code>mod&lt;/code> &lt;code>download&lt;/code> without arguments now downloads source code for only the modules explicitly &lt;a href="https://go.dev/ref/mod#go-mod-file-require">required&lt;/a> in the main module&amp;rsquo;s &lt;code>go.mod&lt;/code> file. (In a &lt;code>go&lt;/code> &lt;code>1.17&lt;/code> or higher module, that set already includes all dependencies needed to build the packages and tests in the main module.) To also download source code for transitive dependencies, use &lt;code>go&lt;/code> &lt;code>mod&lt;/code> &lt;code>download&lt;/code> &lt;code>all&lt;/code>.&lt;/p>
&lt;h4 id="go-mod-vendor">&lt;code>go&lt;/code> &lt;code>mod&lt;/code> &lt;code>vendor&lt;/code>&lt;/h4>
&lt;p>The &lt;code>go&lt;/code> &lt;code>mod&lt;/code> &lt;code>vendor&lt;/code> subcommand now supports a &lt;code>-o&lt;/code> flag to set the output directory. (Other &lt;code>go&lt;/code> commands still read from the &lt;code>vendor&lt;/code> directory at the module root when loading packages with &lt;code>-mod=vendor&lt;/code>, so the main use for this flag is for third-party tools that need to collect package source code.)&lt;/p>
&lt;h4 id="go-mod-tidy">&lt;code>go&lt;/code> &lt;code>mod&lt;/code> &lt;code>tidy&lt;/code>&lt;/h4>
&lt;p>The &lt;code>go&lt;/code> &lt;code>mod&lt;/code> &lt;code>tidy&lt;/code> command now retains additional checksums in the &lt;code>go.sum&lt;/code> file for modules whose source code is needed to verify that each imported package is provided by only one module in the &lt;a href="https://go.dev/ref/mod#glos-build-list">build list&lt;/a>. Because this condition is rare and failure to apply it results in a build error, this change is &lt;em>not&lt;/em> conditioned on the &lt;code>go&lt;/code> version in the main module&amp;rsquo;s &lt;code>go.mod&lt;/code> file.&lt;/p>
&lt;h4 id="go-work">&lt;code>go&lt;/code> &lt;code>work&lt;/code>&lt;/h4>
&lt;p>The &lt;code>go&lt;/code> command now supports a &amp;ldquo;Workspace&amp;rdquo; mode. If a &lt;code>go.work&lt;/code> file is found in the working directory or a parent directory, or one is specified using the &lt;code>GOWORK&lt;/code> environment variable, it will put the &lt;code>go&lt;/code> command into workspace mode. In workspace mode, the &lt;code>go.work&lt;/code> file will be used to determine the set of main modules used as the roots for module resolution, instead of using the normally-found &lt;code>go.mod&lt;/code> file to specify the single main module. For more information see the &lt;a href="https://go.dev/pkg/cmd/go#hdr-Workspace_maintenance">&lt;code>go work&lt;/code>&lt;/a> documentation.&lt;/p>
&lt;h4 id="go-build--asan">&lt;code>go&lt;/code> &lt;code>build&lt;/code> &lt;code>-asan&lt;/code>&lt;/h4>
&lt;p>The &lt;code>go&lt;/code> &lt;code>build&lt;/code> command and related commands now support an &lt;code>-asan&lt;/code> flag that enables interoperation with C (or C++) code compiled with the address sanitizer (C compiler option &lt;code>-fsanitize=address&lt;/code>).&lt;/p>
&lt;h4 id="go-test">&lt;code>go&lt;/code> &lt;code>test&lt;/code>&lt;/h4>
&lt;p>The &lt;code>go&lt;/code> command now supports additional command line options for the new &lt;a href="https://go.dev/doc/go1.18#fuzzing">fuzzing support described above&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>go test&lt;/code> supports &lt;code>-fuzz&lt;/code>, &lt;code>-fuzztime&lt;/code>, and &lt;code>-fuzzminimizetime&lt;/code> options. For documentation on these see &lt;a href="https://go.dev/pkg/cmd/go#hdr-Testing_flags">&lt;code>go help testflag&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;code>go clean&lt;/code> supports a &lt;code>-fuzzcache&lt;/code> option. For documentation see &lt;a href="https://go.dev/pkg/cmd/go#hdr-Remove_object_files_and_cached_files">&lt;code>go help clean&lt;/code>&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h4 id="gobuild-lines">&lt;code>//go:build&lt;/code> lines&lt;/h4>
&lt;p>Go 1.17 introduced &lt;code>//go:build&lt;/code> lines as a more readable way to write build constraints, instead of &lt;code>//&lt;/code> &lt;code>+build&lt;/code> lines. As of Go 1.17, &lt;code>gofmt&lt;/code> adds &lt;code>//go:build&lt;/code> lines to match existing &lt;code>+build&lt;/code> lines and keeps them in sync, while &lt;code>go&lt;/code> &lt;code>vet&lt;/code> diagnoses when they are out of sync.&lt;/p>
&lt;p>Since the release of Go 1.18 marks the end of support for Go 1.16, all supported versions of Go now understand &lt;code>//go:build&lt;/code> lines. In Go 1.18, &lt;code>go&lt;/code> &lt;code>fix&lt;/code> now removes the now-obsolete &lt;code>//&lt;/code> &lt;code>+build&lt;/code> lines in modules declaring &lt;code>go&lt;/code> &lt;code>1.18&lt;/code> or later in their &lt;code>go.mod&lt;/code> files.&lt;/p>
&lt;p>For more information, see &lt;a href="https://go.dev/design/draft-gobuild">https://go.dev/design/draft-gobuild&lt;/a>.&lt;/p>
&lt;h3 id="gofmt">Gofmt&lt;/h3>
&lt;p>&lt;code>gofmt&lt;/code> now reads and formats input files concurrently, with a memory limit proportional to &lt;code>GOMAXPROCS&lt;/code>. On a machine with multiple CPUs, &lt;code>gofmt&lt;/code> should now be significantly faster.&lt;/p>
&lt;h3 id="vet">Vet&lt;/h3>
&lt;h4 id="updates-for-generics">Updates for Generics&lt;/h4>
&lt;p>The &lt;code>vet&lt;/code> tool is updated to support generic code. In most cases, it reports an error in generic code whenever it would report an error in the equivalent non-generic code after substituting for type parameters with a type from their &lt;a href="https://golang.org/ref/spec#Interface_types">type set&lt;/a>. For example, &lt;code>vet&lt;/code> reports a format error in&lt;/p>
&lt;p>func Print[T ~int|~string](t T) {
fmt.Printf(&amp;quot;%d&amp;quot;, t)
}&lt;/p>
&lt;p>because it would report a format error in the non-generic equivalent of &lt;code>Print[string]&lt;/code>:&lt;/p>
&lt;p>func PrintString(x string) {
fmt.Printf(&amp;quot;%d&amp;quot;, x)
}&lt;/p>
&lt;h4 id="precision-improvements-for-existing-checkers">Precision improvements for existing checkers&lt;/h4>
&lt;p>The &lt;code>cmd/vet&lt;/code> checkers &lt;code>copylock&lt;/code>, &lt;code>printf&lt;/code>, &lt;code>sortslice&lt;/code>, &lt;code>testinggoroutine&lt;/code>, and &lt;code>tests&lt;/code> have all had moderate precision improvements to handle additional code patterns. This may lead to newly reported errors in existing packages. For example, the &lt;code>printf&lt;/code> checker now tracks formatting strings created by concatenating string constants. So &lt;code>vet&lt;/code> will report an error in:&lt;/p>
&lt;p>// fmt.Printf formatting directive %d is being passed to Println.
fmt.Println(&amp;quot;%d&amp;quot;+` â‰¡ x (mod 2)`+&amp;quot;\n&amp;quot;, x%2)&lt;/p>
&lt;h2 id="runtime">Runtime&lt;/h2>
&lt;p>The garbage collector now includes non-heap sources of garbage collector work (e.g., stack scanning) when determining how frequently to run. As a result, garbage collector overhead is more predictable when these sources are significant. For most applications these changes will be negligible; however, some Go applications may now use less memory and spend more time on garbage collection, or vice versa, than before. The intended workaround is to tweak &lt;code>GOGC&lt;/code> where necessary.&lt;/p>
&lt;p>The runtime now returns memory to the operating system more efficiently and has been tuned to work more aggressively as a result.&lt;/p>
&lt;p>Go 1.17 generally improved the formatting of arguments in stack traces, but could print inaccurate values for arguments passed in registers. This is improved in Go 1.18 by printing a question mark (&lt;code>?&lt;/code>) after each value that may be inaccurate.&lt;/p>
&lt;p>The built-in function &lt;code>append&lt;/code> now uses a slightly different formula when deciding how much to grow a slice when it must allocate a new underlying array. The new formula is less prone to sudden transitions in allocation behavior.&lt;/p>
&lt;h2 id="compiler">Compiler&lt;/h2>
&lt;p>Go 1.17 &lt;a href="https://go.dev/doc/go1.17#compiler">implemented&lt;/a> a new way of passing function arguments and results using registers instead of the stack on 64-bit x86 architecture on selected operating systems. Go 1.18 expands the supported platforms to include 64-bit ARM (&lt;code>GOARCH=arm64&lt;/code>), big- and little-endian 64-bit PowerPC (&lt;code>GOARCH=ppc64&lt;/code>, &lt;code>ppc64le&lt;/code>), as well as 64-bit x86 architecture (&lt;code>GOARCH=amd64&lt;/code>) on all operating systems. On 64-bit ARM and 64-bit PowerPC systems, benchmarking shows typical performance improvements of 10% or more.&lt;/p>
&lt;p>As &lt;a href="https://go.dev/doc/go1.17#compiler">mentioned&lt;/a> in the Go 1.17 release notes, this change does not affect the functionality of any safe Go code and is designed to have no impact on most assembly code. See the &lt;a href="https://go.dev/doc/go1.17#compiler">Go 1.17 release notes&lt;/a> for more details.&lt;/p>
&lt;p>The compiler now can inline functions that contain range loops or labeled for loops.&lt;/p>
&lt;p>The new &lt;code>-asan&lt;/code> compiler option supports the new &lt;code>go&lt;/code> command &lt;code>-asan&lt;/code> option.&lt;/p>
&lt;p>Because the compiler&amp;rsquo;s type checker was replaced in its entirety to support generics, some error messages now may use different wording than before. In some cases, pre-Go 1.18 error messages provided more detail or were phrased in a more helpful way. We intend to address these cases in Go 1.19.&lt;/p>
&lt;p>Because of changes in the compiler related to supporting generics, the Go 1.18 compile speed can be roughly 15% slower than the Go 1.17 compile speed. The execution time of the compiled code is not affected. We intend to improve the speed of the compiler in future releases.&lt;/p>
&lt;h2 id="linker">Linker&lt;/h2>
&lt;p>The linker emits &lt;a href="https://tailscale.com/blog/go-linker/">far fewer relocations&lt;/a>. As a result, most codebases will link faster, require less memory to link, and generate smaller binaries. Tools that process Go binaries should use Go 1.18&amp;rsquo;s &lt;code>debug/gosym&lt;/code> package to transparently handle both old and new binaries.&lt;/p>
&lt;p>The new &lt;code>-asan&lt;/code> linker option supports the new &lt;code>go&lt;/code> command &lt;code>-asan&lt;/code> option.&lt;/p>
&lt;h2 id="bootstrap">Bootstrap&lt;/h2>
&lt;p>When building a Go release from source and &lt;code>GOROOT_BOOTSTRAP&lt;/code> is not set, previous versions of Go looked for a Go 1.4 or later bootstrap toolchain in the directory &lt;code>$HOME/go1.4&lt;/code> (&lt;code>%HOMEDRIVE%%HOMEPATH%\go1.4&lt;/code> on Windows). Go now looks first for &lt;code>$HOME/go1.17&lt;/code> or &lt;code>$HOME/sdk/go1.17&lt;/code> before falling back to &lt;code>$HOME/go1.4&lt;/code>. We intend for Go 1.19 to require Go 1.17 or later for bootstrap, and this change should make the transition smoother. For more details, see &lt;a href="https://go.dev/issue/44505">go.dev/issue/44505&lt;/a>.&lt;/p>
&lt;h2 id="core-library">Core library&lt;/h2>
&lt;h3 id="new-debugbuildinfo-package">New &lt;code>debug/buildinfo&lt;/code> package&lt;/h3>
&lt;p>The new &lt;a href="https://go.dev/pkg/debug/buildinfo">&lt;code>debug/buildinfo&lt;/code>&lt;/a> package provides access to module versions, version control information, and build flags embedded in executable files built by the &lt;code>go&lt;/code> command. The same information is also available via &lt;a href="https://go.dev/pkg/runtime/debug#ReadBuildInfo">&lt;code>runtime/debug.ReadBuildInfo&lt;/code>&lt;/a> for the currently running binary and via &lt;code>go&lt;/code> &lt;code>version&lt;/code> &lt;code>-m&lt;/code> on the command line.&lt;/p>
&lt;h3 id="new-netnetip-package">New &lt;code>net/netip&lt;/code> package&lt;/h3>
&lt;p>The new &lt;a href="https://go.dev/pkg/net/netip/">&lt;code>net/netip&lt;/code>&lt;/a> package defines a new IP address type, &lt;a href="https://go.dev/pkg/net/netip/#Addr">&lt;code>Addr&lt;/code>&lt;/a>. Compared to the existing &lt;a href="https://go.dev/pkg/net/#IP">&lt;code>net.IP&lt;/code>&lt;/a> type, the &lt;code>netip.Addr&lt;/code> type takes less memory, is immutable, and is comparable so it supports &lt;code>==&lt;/code> and can be used as a map key.&lt;/p>
&lt;p>In addition to &lt;code>Addr&lt;/code>, the package defines &lt;a href="https://go.dev/pkg/net/netip/#AddrPort">&lt;code>AddrPort&lt;/code>&lt;/a>, representing an IP and port, and &lt;a href="https://go.dev/pkg/net/netip/#Prefix">&lt;code>Prefix&lt;/code>&lt;/a>, representing a network CIDR prefix.&lt;/p>
&lt;p>The package also defines several functions to create and examine these new types: &lt;a href="https://go.dev/pkg/net/netip#AddrFrom4">&lt;code>AddrFrom4&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/net/netip#AddrFrom16">&lt;code>AddrFrom16&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/net/netip#AddrFromSlice">&lt;code>AddrFromSlice&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/net/netip#AddrPortFrom">&lt;code>AddrPortFrom&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/net/netip#IPv4Unspecified">&lt;code>IPv4Unspecified&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/net/netip#IPv6LinkLocalAllNodes">&lt;code>IPv6LinkLocalAllNodes&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/net/netip#IPv6Unspecified">&lt;code>IPv6Unspecified&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/net/netip#MustParseAddr">&lt;code>MustParseAddr&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/net/netip#MustParseAddrPort">&lt;code>MustParseAddrPort&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/net/netip#MustParsePrefix">&lt;code>MustParsePrefix&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/net/netip#ParseAddr">&lt;code>ParseAddr&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/net/netip#ParseAddrPort">&lt;code>ParseAddrPort&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/net/netip#ParsePrefix">&lt;code>ParsePrefix&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/net/netip#PrefixFrom">&lt;code>PrefixFrom&lt;/code>&lt;/a>.&lt;/p>
&lt;p>The &lt;a href="https://go.dev/pkg/net/">&lt;code>net&lt;/code>&lt;/a> package includes new methods that parallel existing methods, but return &lt;code>netip.AddrPort&lt;/code> instead of the heavier-weight &lt;a href="https://go.dev/pkg/net/#IP">&lt;code>net.IP&lt;/code>&lt;/a> or &lt;a href="https://go.dev/pkg/net/#UDPAddr">&lt;code>*net.UDPAddr&lt;/code>&lt;/a> types: &lt;a href="https://go.dev/pkg/net/#Resolver.LookupNetIP">&lt;code>Resolver.LookupNetIP&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/net/#UDPConn.ReadFromUDPAddrPort">&lt;code>UDPConn.ReadFromUDPAddrPort&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/net/#UDPConn.ReadMsgUDPAddrPort">&lt;code>UDPConn.ReadMsgUDPAddrPort&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/net/#UDPConn.WriteToUDPAddrPort">&lt;code>UDPConn.WriteToUDPAddrPort&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/net/#UDPConn.WriteMsgUDPAddrPort">&lt;code>UDPConn.WriteMsgUDPAddrPort&lt;/code>&lt;/a>. The new &lt;code>UDPConn&lt;/code> methods support allocation-free I/O.&lt;/p>
&lt;p>The &lt;code>net&lt;/code> package also now includes functions and methods to convert between the existing &lt;a href="https://go.dev/pkg/net/#TCPAddr">&lt;code>TCPAddr&lt;/code>&lt;/a>/&lt;a href="https://go.dev/pkg/net/#UDPAddr">&lt;code>UDPAddr&lt;/code>&lt;/a> types and &lt;code>netip.AddrPort&lt;/code>: &lt;a href="https://go.dev/pkg/net/#TCPAddrFromAddrPort">&lt;code>TCPAddrFromAddrPort&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/net/#UDPAddrFromAddrPort">&lt;code>UDPAddrFromAddrPort&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/net/#TCPAddr.AddrPort">&lt;code>TCPAddr.AddrPort&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/net/#UDPAddr.AddrPort">&lt;code>UDPAddr.AddrPort&lt;/code>&lt;/a>.&lt;/p>
&lt;h3 id="tls-10-and-11-disabled-by-default-client-side">TLS 1.0 and 1.1 disabled by default client-side&lt;/h3>
&lt;p>If &lt;a href="https://go.dev/pkg/crypto/tls/#Config.MinVersion">&lt;code>Config.MinVersion&lt;/code>&lt;/a> is not set, it now defaults to TLS 1.2 for client connections. Any safely up-to-date server is expected to support TLS 1.2, and browsers have required it since 2020. TLS 1.0 and 1.1 are still supported by setting &lt;code>Config.MinVersion&lt;/code> to &lt;code>VersionTLS10&lt;/code>. The server-side default is unchanged at TLS 1.0.&lt;/p>
&lt;p>The default can be temporarily reverted to TLS 1.0 by setting the &lt;code>GODEBUG=tls10default=1&lt;/code> environment variable. This option will be removed in Go 1.19.&lt;/p>
&lt;h3 id="rejecting-sha-1-certificates">Rejecting SHA-1 certificates&lt;/h3>
&lt;p>&lt;code>crypto/x509&lt;/code> will now reject certificates signed with the SHA-1 hash function. This doesn&amp;rsquo;t apply to self-signed root certificates. Practical attacks against SHA-1 &lt;a href="https://shattered.io/">have been demonstrated since 2017&lt;/a> and publicly trusted Certificate Authorities have not issued SHA-1 certificates since 2015.&lt;/p>
&lt;p>This can be temporarily reverted by setting the &lt;code>GODEBUG=x509sha1=1&lt;/code> environment variable. This option will be removed in a future release.&lt;/p>
&lt;h3 id="minor-changes-to-the-library">Minor changes to the library&lt;/h3>
&lt;p>As always, there are various minor changes and updates to the library, made with the Go 1 &lt;a href="https://go.dev/doc/go1compat">promise of compatibility&lt;/a> in mind.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/bufio/">bufio&lt;/a>&lt;/p>
&lt;p>The new &lt;a href="https://go.dev/pkg/bufio#Writer.AvailableBuffer">&lt;code>Writer.AvailableBuffer&lt;/code>&lt;/a> method returns an empty buffer with a possibly non-empty capacity for use with append-like APIs. After appending, the buffer can be provided to a succeeding &lt;code>Write&lt;/code> call and possibly avoid any copying.&lt;/p>
&lt;p>The &lt;a href="https://go.dev/pkg/bufio#Reader.Reset">&lt;code>Reader.Reset&lt;/code>&lt;/a> and &lt;a href="https://go.dev/pkg/bufio#Writer.Reset">&lt;code>Writer.Reset&lt;/code>&lt;/a> methods now use the default buffer size when called on objects with a &lt;code>nil&lt;/code> buffer.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/bytes/">bytes&lt;/a>&lt;/p>
&lt;p>The new &lt;a href="https://go.dev/pkg/bytes/#Cut">&lt;code>Cut&lt;/code>&lt;/a> function slices a &lt;code>[]byte&lt;/code> around a separator. It can replace and simplify many common uses of &lt;a href="https://go.dev/pkg/bytes/#Index">&lt;code>Index&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/bytes/#IndexByte">&lt;code>IndexByte&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/bytes/#IndexRune">&lt;code>IndexRune&lt;/code>&lt;/a>, and &lt;a href="https://go.dev/pkg/bytes/#SplitN">&lt;code>SplitN&lt;/code>&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/bytes/#Trim">&lt;code>Trim&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/bytes/#TrimLeft">&lt;code>TrimLeft&lt;/code>&lt;/a>, and &lt;a href="https://go.dev/pkg/bytes/#TrimRight">&lt;code>TrimRight&lt;/code>&lt;/a> are now allocation free and, especially for small ASCII cutsets, up to 10 times faster.&lt;/p>
&lt;p>The &lt;a href="https://go.dev/pkg/bytes/#Title">&lt;code>Title&lt;/code>&lt;/a> function is now deprecated. It doesn&amp;rsquo;t handle Unicode punctuation and language-specific capitalization rules, and is superseded by the &lt;a href="https://golang.org/x/text/cases">golang.org/x/text/cases&lt;/a> package.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/crypto/elliptic/">crypto/elliptic&lt;/a>&lt;/p>
&lt;p>The &lt;a href="https://go.dev/pkg/crypto/elliptic#P224">&lt;code>P224&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/crypto/elliptic#P384">&lt;code>P384&lt;/code>&lt;/a>, and &lt;a href="https://go.dev/pkg/crypto/elliptic#P521">&lt;code>P521&lt;/code>&lt;/a> curve implementations are now all backed by code generated by the &lt;a href="https://github.com/mmcloughlin/addchain">addchain&lt;/a> and &lt;a href="https://github.com/mit-plv/fiat-crypto">fiat-crypto&lt;/a> projects, the latter of which is based on a formally-verified model of the arithmetic operations. They now use safer complete formulas and internal APIs. P-224 and P-384 are now approximately four times faster. All specific curve implementations are now constant-time.&lt;/p>
&lt;p>Operating on invalid curve points (those for which the &lt;code>IsOnCurve&lt;/code> method returns false, and which are never returned by &lt;a href="https://go.dev/pkg/crypto/elliptic#Unmarshal">&lt;code>Unmarshal&lt;/code>&lt;/a> or a &lt;code>Curve&lt;/code> method operating on a valid point) has always been undefined behavior, can lead to key recovery attacks, and is now unsupported by the new backend. If an invalid point is supplied to a &lt;code>P224&lt;/code>, &lt;code>P384&lt;/code>, or &lt;code>P521&lt;/code> method, that method will now return a random point. The behavior might change to an explicit panic in a future release.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/crypto/tls/">crypto/tls&lt;/a>&lt;/p>
&lt;p>The new &lt;a href="https://go.dev/pkg/crypto/tls/#Conn.NetConn">&lt;code>Conn.NetConn&lt;/code>&lt;/a> method allows access to the underlying &lt;a href="https://go.dev/pkg/net#Conn">&lt;code>net.Conn&lt;/code>&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/crypto/x509">crypto/x509&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/crypto/x509/#Certificate.Verify">&lt;code>Certificate.Verify&lt;/code>&lt;/a> now uses platform APIs to verify certificate validity on macOS and iOS when it is called with a nil &lt;a href="https://go.dev/pkg/crypto/x509/#VerifyOpts.Roots">&lt;code>VerifyOpts.Roots&lt;/code>&lt;/a> or when using the root pool returned from &lt;a href="https://go.dev/pkg/crypto/x509/#SystemCertPool">&lt;code>SystemCertPool&lt;/code>&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/crypto/x509/#SystemCertPool">&lt;code>SystemCertPool&lt;/code>&lt;/a> is now available on Windows.&lt;/p>
&lt;p>On Windows, macOS, and iOS, when a &lt;a href="https://go.dev/pkg/crypto/x509/#CertPool">&lt;code>CertPool&lt;/code>&lt;/a> returned by &lt;a href="https://go.dev/pkg/crypto/x509/#SystemCertPool">&lt;code>SystemCertPool&lt;/code>&lt;/a> has additional certificates added to it, &lt;a href="https://go.dev/pkg/crypto/x509/#Certificate.Verify">&lt;code>Certificate.Verify&lt;/code>&lt;/a> will do two verifications: one using the platform verifier APIs and the system roots, and one using the Go verifier and the additional roots. Chains returned by the platform verifier APIs will be prioritized.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/crypto/x509/#CertPool.Subjects">&lt;code>CertPool.Subjects&lt;/code>&lt;/a> is deprecated. On Windows, macOS, and iOS the &lt;a href="https://go.dev/pkg/crypto/x509/#CertPool">&lt;code>CertPool&lt;/code>&lt;/a> returned by &lt;a href="https://go.dev/pkg/crypto/x509/#SystemCertPool">&lt;code>SystemCertPool&lt;/code>&lt;/a> will return a pool which does not include system roots in the slice returned by &lt;code>Subjects&lt;/code>, as a static list can&amp;rsquo;t appropriately represent the platform policies and might not be available at all from the platform APIs.&lt;/p>
&lt;p>Support for signing certificates using signature algorithms that depend on the MD5 hash (&lt;code>MD5WithRSA&lt;/code>) may be removed in Go 1.19.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/debug/dwarf/">debug/dwarf&lt;/a>&lt;/p>
&lt;p>The &lt;a href="https://go.dev/pkg/debug/dwarf#StructField">&lt;code>StructField&lt;/code>&lt;/a> and &lt;a href="https://go.dev/pkg/debug/dwarf#BasicType">&lt;code>BasicType&lt;/code>&lt;/a> structs both now have a &lt;code>DataBitOffset&lt;/code> field, which holds the value of the &lt;code>DW_AT_data_bit_offset&lt;/code> attribute if present.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/debug/elf/">debug/elf&lt;/a>&lt;/p>
&lt;p>The &lt;a href="https://go.dev/pkg/debug/elf/#R_PPC64_RELATIVE">&lt;code>R_PPC64_RELATIVE&lt;/code>&lt;/a> constant has been added.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/debug/plan9obj/">debug/plan9obj&lt;/a>&lt;/p>
&lt;p>The &lt;a href="https://go.dev/pkg/debug/plan9obj#File.Symbols">File.Symbols&lt;/a> method now returns the new exported error value &lt;a href="https://go.dev/pkg/debug/plan9obj#ErrNoSymbols">ErrNoSymbols&lt;/a> if the file has no symbol section.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/embed/">embed&lt;/a>&lt;/p>
&lt;p>A &lt;a href="https://go.dev/pkg/embed#hdr-Directives">&lt;code>go:embed&lt;/code>&lt;/a> directive may now start with &lt;code>all:&lt;/code> to include files whose names start with dot or underscore.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/go/ast/">go/ast&lt;/a>&lt;/p>
&lt;p>Per the proposal &lt;a href="https://go.googlesource.com/proposal/+/master/design/47781-parameterized-go-ast.md">Additions to go/ast and go/token to support parameterized functions and types&lt;/a> the following additions are made to the &lt;a href="https://go.dev/pkg/go/ast">&lt;code>go/ast&lt;/code>&lt;/a> package:&lt;/p>
&lt;ul>
&lt;li>the &lt;a href="https://go.dev/pkg/go/ast/#FuncType">&lt;code>FuncType&lt;/code>&lt;/a> and &lt;a href="https://go.dev/pkg/go/ast/#TypeSpec">&lt;code>TypeSpec&lt;/code>&lt;/a> nodes have a new field &lt;code>TypeParams&lt;/code> to hold type parameters, if any.&lt;/li>
&lt;li>The new expression node &lt;a href="https://go.dev/pkg/go/ast/#IndexListExpr">&lt;code>IndexListExpr&lt;/code>&lt;/a> represents index expressions with multiple indices, used for function and type instantiations with more than one explicit type argument.&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://go.dev/pkg/go/constant/">go/constant&lt;/a>&lt;/p>
&lt;p>The new &lt;a href="https://go.dev/pkg/go/constant/#Kind.String">&lt;code>Kind.String&lt;/code>&lt;/a> method returns a human-readable name for the receiver kind.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/go/token/">go/token&lt;/a>&lt;/p>
&lt;p>The new constant &lt;a href="https://go.dev/pkg/go/token/#TILDE">&lt;code>TILDE&lt;/code>&lt;/a> represents the &lt;code>~&lt;/code> token per the proposal &lt;a href="https://go.googlesource.com/proposal/+/master/design/47781-parameterized-go-ast.md">Additions to go/ast and go/token to support parameterized functions and types&lt;/a> .&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/go/types/">go/types&lt;/a>&lt;/p>
&lt;p>The new &lt;a href="https://go.dev/pkg/go/types/#Config.GoVersion">&lt;code>Config.GoVersion&lt;/code>&lt;/a> field sets the accepted Go language version.&lt;/p>
&lt;p>Per the proposal &lt;a href="https://go.googlesource.com/proposal/+/master/design/47916-parameterized-go-types.md">Additions to go/types to support type parameters&lt;/a> the following additions are made to the &lt;a href="https://go.dev/pkg/go/types">&lt;code>go/types&lt;/code>&lt;/a> package:&lt;/p>
&lt;ul>
&lt;li>The new type &lt;a href="https://go.dev/pkg/go/types/#TypeParam">&lt;code>TypeParam&lt;/code>&lt;/a>, factory function &lt;a href="https://go.dev/pkg/go/types/#NewTypeParam">&lt;code>NewTypeParam&lt;/code>&lt;/a>, and associated methods are added to represent a type parameter.&lt;/li>
&lt;li>The new type &lt;a href="https://go.dev/pkg/go/types/#TypeParamList">&lt;code>TypeParamList&lt;/code>&lt;/a> holds a list of type parameters.&lt;/li>
&lt;li>The new type &lt;a href="https://go.dev/pkg/go/types/#TypeList">&lt;code>TypeList&lt;/code>&lt;/a> holds a list of types.&lt;/li>
&lt;li>The new factory function &lt;a href="https://go.dev/pkg/go/types/#NewSignatureType">&lt;code>NewSignatureType&lt;/code>&lt;/a> allocates a &lt;a href="https://go.dev/pkg/go/types/#Signature">&lt;code>Signature&lt;/code>&lt;/a> with (receiver or function) type parameters. To access those type parameters, the &lt;code>Signature&lt;/code> type has two new methods &lt;a href="https://go.dev/pkg/go/types/#Signature.RecvTypeParams">&lt;code>Signature.RecvTypeParams&lt;/code>&lt;/a> and &lt;a href="https://go.dev/pkg/go/types/#Signature.TypeParams">&lt;code>Signature.TypeParams&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://go.dev/pkg/go/types/#Named">&lt;code>Named&lt;/code>&lt;/a> types have four new methods: &lt;a href="https://go.dev/pkg/go/types/#Named.Origin">&lt;code>Named.Origin&lt;/code>&lt;/a> to get the original parameterized types of instantiated types, &lt;a href="https://go.dev/pkg/go/types/#Named.TypeArgs">&lt;code>Named.TypeArgs&lt;/code>&lt;/a> and &lt;a href="https://go.dev/pkg/go/types/#Named.TypeParams">&lt;code>Named.TypeParams&lt;/code>&lt;/a> to get the type arguments or type parameters of an instantiated or parameterized type, and &lt;a href="https://go.dev/pkg/go/types/#Named.TypeParams">&lt;code>Named.SetTypeParams&lt;/code>&lt;/a> to set the type parameters (for instance, when importing a named type where allocation of the named type and setting of type parameters cannot be done simultaneously due to possible cycles).&lt;/li>
&lt;li>The &lt;a href="https://go.dev/pkg/go/types/#Interface">&lt;code>Interface&lt;/code>&lt;/a> type has four new methods: &lt;a href="https://go.dev/pkg/go/types/#Interface.IsComparable">&lt;code>Interface.IsComparable&lt;/code>&lt;/a> and &lt;a href="https://go.dev/pkg/go/types/#Interface.IsMethodSet">&lt;code>Interface.IsMethodSet&lt;/code>&lt;/a> to query properties of the type set defined by the interface, and &lt;a href="https://go.dev/pkg/go/types/#Interface.MarkImplicit">&lt;code>Interface.MarkImplicit&lt;/code>&lt;/a> and &lt;a href="https://go.dev/pkg/go/types/#Interface.IsImplicit">&lt;code>Interface.IsImplicit&lt;/code>&lt;/a> to set and test whether the interface is an implicit interface around a type constraint literal.&lt;/li>
&lt;li>The new types &lt;a href="https://go.dev/pkg/go/types/#Union">&lt;code>Union&lt;/code>&lt;/a> and &lt;a href="https://go.dev/pkg/go/types/#Term">&lt;code>Term&lt;/code>&lt;/a>, factory functions &lt;a href="https://go.dev/pkg/go/types/#NewUnion">&lt;code>NewUnion&lt;/code>&lt;/a> and &lt;a href="https://go.dev/pkg/go/types/#NewTerm">&lt;code>NewTerm&lt;/code>&lt;/a>, and associated methods are added to represent type sets in interfaces.&lt;/li>
&lt;li>The new function &lt;a href="https://go.dev/pkg/go/types/#Instantiate">&lt;code>Instantiate&lt;/code>&lt;/a> instantiates a parameterized type.&lt;/li>
&lt;li>The new &lt;a href="https://go.dev/pkg/go/types/#Info.Instances">&lt;code>Info.Instances&lt;/code>&lt;/a> map records function and type instantiations through the new &lt;a href="https://go.dev/pkg/go/types/#Instance">&lt;code>Instance&lt;/code>&lt;/a> type.&lt;/li>
&lt;li>The new type &lt;a href="https://go.dev/pkg/go/types/#ArgumentError">&lt;code>ArgumentError&lt;/code>&lt;/a> and associated methods are added to represent an error related to a type argument.&lt;/li>
&lt;li>The new type &lt;a href="https://go.dev/pkg/go/types/#Context">&lt;code>Context&lt;/code>&lt;/a> and factory function &lt;a href="https://go.dev/pkg/go/types/#NewContext">&lt;code>NewContext&lt;/code>&lt;/a> are added to facilitate sharing of identical type instances across type-checked packages, via the new &lt;a href="https://go.dev/pkg/go/types/#Config.Context">&lt;code>Config.Context&lt;/code>&lt;/a> field.&lt;/li>
&lt;/ul>
&lt;p>The predicates &lt;a href="https://go.dev/pkg/go/types/#AssignableTo">&lt;code>AssignableTo&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/go/types/#ConvertibleTo">&lt;code>ConvertibleTo&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/go/types/#Implements">&lt;code>Implements&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/go/types/#Identical">&lt;code>Identical&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/go/types/#IdenticalIgnoreTags">&lt;code>IdenticalIgnoreTags&lt;/code>&lt;/a>, and &lt;a href="https://go.dev/pkg/go/types/#AssertableTo">&lt;code>AssertableTo&lt;/code>&lt;/a> now also work with arguments that are or contain generalized interfaces, i.e. interfaces that may only be used as type constraints in Go code. Note that the behavior of &lt;code>AssignableTo&lt;/code>, &lt;code>ConvertibleTo&lt;/code>, &lt;code>Implements&lt;/code>, and &lt;code>AssertableTo&lt;/code> is undefined with arguments that are uninstantiated generic types, and &lt;code>AssertableTo&lt;/code> is undefined if the first argument is a generalized interface.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/html/template/">html/template&lt;/a>&lt;/p>
&lt;p>Within a &lt;code>range&lt;/code> pipeline the new &lt;code>{{break}}&lt;/code> command will end the loop early and the new &lt;code>{{continue}}&lt;/code> command will immediately start the next loop iteration.&lt;/p>
&lt;p>The &lt;code>and&lt;/code> function no longer always evaluates all arguments; it stops evaluating arguments after the first argument that evaluates to false. Similarly, the &lt;code>or&lt;/code> function now stops evaluating arguments after the first argument that evaluates to true. This makes a difference if any of the arguments is a function call.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/image/draw/">image/draw&lt;/a>&lt;/p>
&lt;p>The &lt;code>Draw&lt;/code> and &lt;code>DrawMask&lt;/code> fallback implementations (used when the arguments are not the most common image types) are now faster when those arguments implement the optional &lt;a href="https://go.dev/pkg/image/draw/#RGBA64Image">&lt;code>draw.RGBA64Image&lt;/code>&lt;/a> and &lt;a href="https://go.dev/pkg/image/#RGBA64Image">&lt;code>image.RGBA64Image&lt;/code>&lt;/a> interfaces that were added in Go 1.17.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/net/">net&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/net#Error">&lt;code>net.Error.Temporary&lt;/code>&lt;/a> has been deprecated.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/net/http/">net/http&lt;/a>&lt;/p>
&lt;p>On WebAssembly targets, the &lt;code>Dial&lt;/code>, &lt;code>DialContext&lt;/code>, &lt;code>DialTLS&lt;/code> and &lt;code>DialTLSContext&lt;/code> method fields in &lt;a href="https://go.dev/pkg/net/http/#Transport">&lt;code>Transport&lt;/code>&lt;/a> will now be correctly used, if specified, for making HTTP requests.&lt;/p>
&lt;p>The new &lt;a href="https://go.dev/pkg/net/http#Cookie.Valid">&lt;code>Cookie.Valid&lt;/code>&lt;/a> method reports whether the cookie is valid.&lt;/p>
&lt;p>The new &lt;a href="https://go.dev/pkg/net/http#MaxBytesHandler">&lt;code>MaxBytesHandler&lt;/code>&lt;/a> function creates a &lt;code>Handler&lt;/code> that wraps its &lt;code>ResponseWriter&lt;/code> and &lt;code>Request.Body&lt;/code> with a &lt;a href="https://go.dev/pkg/net/http#MaxBytesReader">&lt;code>MaxBytesReader&lt;/code>&lt;/a>.&lt;/p>
&lt;p>When looking up a domain name containing non-ASCII characters, the Unicode-to-ASCII conversion is now done in accordance with Nontransitional Processing as defined in the &lt;a href="https://unicode.org/reports/tr46/">Unicode IDNA Compatibility Processing&lt;/a> standard (UTS #46). The interpretation of four distinct runes are changed: ÃŸ, Ï‚, zero-width joiner U+200D, and zero-width non-joiner U+200C. Nontransitional Processing is consistent with most applications and web browsers.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/os/user/">os/user&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/os/user#User.GroupIds">&lt;code>User.GroupIds&lt;/code>&lt;/a> now uses a Go native implementation when cgo is not available.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/reflect/">reflect&lt;/a>&lt;/p>
&lt;p>The new &lt;a href="https://go.dev/pkg/reflect/#Value.SetIterKey">&lt;code>Value.SetIterKey&lt;/code>&lt;/a> and &lt;a href="https://go.dev/pkg/reflect/#Value.SetIterValue">&lt;code>Value.SetIterValue&lt;/code>&lt;/a> methods set a Value using a map iterator as the source. They are equivalent to &lt;code>Value.Set(iter.Key())&lt;/code> and &lt;code>Value.Set(iter.Value())&lt;/code>, but do fewer allocations.&lt;/p>
&lt;p>The new &lt;a href="https://go.dev/pkg/reflect/#Value.UnsafePointer">&lt;code>Value.UnsafePointer&lt;/code>&lt;/a> method returns the Value&amp;rsquo;s value as an &lt;a href="https://go.dev/pkg/unsafe/#Pointer">&lt;code>unsafe.Pointer&lt;/code>&lt;/a>. This allows callers to migrate from &lt;a href="https://go.dev/pkg/reflect/#Value.UnsafeAddr">&lt;code>Value.UnsafeAddr&lt;/code>&lt;/a> and &lt;a href="https://go.dev/pkg/reflect/#Value.Pointer">&lt;code>Value.Pointer&lt;/code>&lt;/a> to eliminate the need to perform uintptr to unsafe.Pointer conversions at the callsite (as unsafe.Pointer rules require).&lt;/p>
&lt;p>The new &lt;a href="https://go.dev/pkg/reflect/#MapIter.Reset">&lt;code>MapIter.Reset&lt;/code>&lt;/a> method changes its receiver to iterate over a different map. The use of &lt;a href="https://go.dev/pkg/reflect/#MapIter.Reset">&lt;code>MapIter.Reset&lt;/code>&lt;/a> allows allocation-free iteration over many maps.&lt;/p>
&lt;p>A number of methods ( &lt;a href="https://go.dev/pkg/reflect#Value.CanInt">&lt;code>Value.CanInt&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/reflect#Value.CanUint">&lt;code>Value.CanUint&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/reflect#Value.CanFloat">&lt;code>Value.CanFloat&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/reflect#Value.CanComplex">&lt;code>Value.CanComplex&lt;/code>&lt;/a> ) have been added to &lt;a href="https://go.dev/pkg/reflect#Value">&lt;code>Value&lt;/code>&lt;/a> to test if a conversion is safe.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/reflect#Value.FieldByIndexErr">&lt;code>Value.FieldByIndexErr&lt;/code>&lt;/a> has been added to avoid the panic that occurs in &lt;a href="https://go.dev/pkg/reflect#Value.FieldByIndex">&lt;code>Value.FieldByIndex&lt;/code>&lt;/a> when stepping through a nil pointer to an embedded struct.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/reflect#Ptr">&lt;code>reflect.Ptr&lt;/code>&lt;/a> and &lt;a href="https://go.dev/pkg/reflect#PtrTo">&lt;code>reflect.PtrTo&lt;/code>&lt;/a> have been renamed to &lt;a href="https://go.dev/pkg/reflect#Pointer">&lt;code>reflect.Pointer&lt;/code>&lt;/a> and &lt;a href="https://go.dev/pkg/reflect#PointerTo">&lt;code>reflect.PointerTo&lt;/code>&lt;/a>, respectively, for consistency with the rest of the reflect package. The old names will continue to work, but will be deprecated in a future Go release.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/regexp/">regexp&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/regexp/">&lt;code>regexp&lt;/code>&lt;/a> now treats each invalid byte of a UTF-8 string as &lt;code>U+FFFD&lt;/code>.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/runtime/debug/">runtime/debug&lt;/a>&lt;/p>
&lt;p>The &lt;a href="https://go.dev/pkg/runtime/debug#BuildInfo">&lt;code>BuildInfo&lt;/code>&lt;/a> struct has two new fields, containing additional information about how the binary was built:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://go.dev/pkg/runtime/debug#BuildInfo.GoVersion">&lt;code>GoVersion&lt;/code>&lt;/a> holds the version of Go used to build the binary.&lt;/li>
&lt;li>&lt;a href="https://go.dev/pkg/runtime/debug#BuildInfo.Settings">&lt;code>Settings&lt;/code>&lt;/a> is a slice of &lt;a href="https://go.dev/pkg/runtime/debug#BuildSettings">&lt;code>BuildSettings&lt;/code>&lt;/a> structs holding key/value pairs describing the build.&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://go.dev/pkg/runtime/pprof/">runtime/pprof&lt;/a>&lt;/p>
&lt;p>The CPU profiler now uses per-thread timers on Linux. This increases the maximum CPU usage that a profile can observe, and reduces some forms of bias.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/strconv/">strconv&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/strconv/#strconv.Unquote">&lt;code>strconv.Unquote&lt;/code>&lt;/a> now rejects Unicode surrogate halves.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/strings/">strings&lt;/a>&lt;/p>
&lt;p>The new &lt;a href="https://go.dev/pkg/strings/#Cut">&lt;code>Cut&lt;/code>&lt;/a> function slices a &lt;code>string&lt;/code> around a separator. It can replace and simplify many common uses of &lt;a href="https://go.dev/pkg/strings/#Index">&lt;code>Index&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/strings/#IndexByte">&lt;code>IndexByte&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/strings/#IndexRune">&lt;code>IndexRune&lt;/code>&lt;/a>, and &lt;a href="https://go.dev/pkg/strings/#SplitN">&lt;code>SplitN&lt;/code>&lt;/a>.&lt;/p>
&lt;p>The new &lt;a href="https://go.dev/pkg/strings/#Clone">&lt;code>Clone&lt;/code>&lt;/a> function copies the input &lt;code>string&lt;/code> without the returned cloned &lt;code>string&lt;/code> referencing the input string&amp;rsquo;s memory.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/strings/#Trim">&lt;code>Trim&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/strings/#TrimLeft">&lt;code>TrimLeft&lt;/code>&lt;/a>, and &lt;a href="https://go.dev/pkg/strings/#TrimRight">&lt;code>TrimRight&lt;/code>&lt;/a> are now allocation free and, especially for small ASCII cutsets, up to 10 times faster.&lt;/p>
&lt;p>The &lt;a href="https://go.dev/pkg/strings/#Title">&lt;code>Title&lt;/code>&lt;/a> function is now deprecated. It doesn&amp;rsquo;t handle Unicode punctuation and language-specific capitalization rules, and is superseded by the &lt;a href="https://golang.org/x/text/cases">golang.org/x/text/cases&lt;/a> package.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/sync/">sync&lt;/a>&lt;/p>
&lt;p>The new methods &lt;a href="https://go.dev/pkg/sync#Mutex.TryLock">&lt;code>Mutex.TryLock&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/sync#RWMutex.TryLock">&lt;code>RWMutex.TryLock&lt;/code>&lt;/a>, and &lt;a href="https://go.dev/pkg/sync#RWMutex.TryRLock">&lt;code>RWMutex.TryRLock&lt;/code>&lt;/a>, will acquire the lock if it is not currently held.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/syscall/">syscall&lt;/a>&lt;/p>
&lt;p>The new function &lt;a href="https://go.dev/pkg/syscall/?GOOS=windows#SyscallN">&lt;code>SyscallN&lt;/code>&lt;/a> has been introduced for Windows, allowing for calls with arbitrary number of arguments. As a result, &lt;a href="https://go.dev/pkg/syscall/?GOOS=windows#Syscall">&lt;code>Syscall&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/syscall/?GOOS=windows#Syscall6">&lt;code>Syscall6&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/syscall/?GOOS=windows#Syscall9">&lt;code>Syscall9&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/syscall/?GOOS=windows#Syscall12">&lt;code>Syscall12&lt;/code>&lt;/a>, &lt;a href="https://go.dev/pkg/syscall/?GOOS=windows#Syscall15">&lt;code>Syscall15&lt;/code>&lt;/a>, and &lt;a href="https://go.dev/pkg/syscall/?GOOS=windows#Syscall18">&lt;code>Syscall18&lt;/code>&lt;/a> are deprecated in favor of &lt;a href="https://go.dev/pkg/syscall/?GOOS=windows#SyscallN">&lt;code>SyscallN&lt;/code>&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/syscall/?GOOS=freebsd#SysProcAttr.Pdeathsig">&lt;code>SysProcAttr.Pdeathsig&lt;/code>&lt;/a> is now supported in FreeBSD.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/syscall/js/">syscall/js&lt;/a>&lt;/p>
&lt;p>The &lt;code>Wrapper&lt;/code> interface has been removed.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/testing/">testing&lt;/a>&lt;/p>
&lt;p>The precedence of &lt;code>/&lt;/code> in the argument for &lt;code>-run&lt;/code> and &lt;code>-bench&lt;/code> has been increased. &lt;code>A/B|C/D&lt;/code> used to be treated as &lt;code>A/(B|C)/D&lt;/code> and is now treated as &lt;code>(A/B)|(C/D)&lt;/code>.&lt;/p>
&lt;p>If the &lt;code>-run&lt;/code> option does not select any tests, the &lt;code>-count&lt;/code> option is ignored. This could change the behavior of existing tests in the unlikely case that a test changes the set of subtests that are run each time the test function itself is run.&lt;/p>
&lt;p>The new &lt;a href="https://go.dev/pkg/testing#F">&lt;code>testing.F&lt;/code>&lt;/a> type is used by the new &lt;a href="https://go.dev/doc/go1.18#fuzzing">fuzzing support described above&lt;/a>. Tests also now support the command line options &lt;code>-test.fuzz&lt;/code>, &lt;code>-test.fuzztime&lt;/code>, and &lt;code>-test.fuzzminimizetime&lt;/code>.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/text/template/">text/template&lt;/a>&lt;/p>
&lt;p>Within a &lt;code>range&lt;/code> pipeline the new &lt;code>{{break}}&lt;/code> command will end the loop early and the new &lt;code>{{continue}}&lt;/code> command will immediately start the next loop iteration.&lt;/p>
&lt;p>The &lt;code>and&lt;/code> function no longer always evaluates all arguments; it stops evaluating arguments after the first argument that evaluates to false. Similarly, the &lt;code>or&lt;/code> function now stops evaluating arguments after the first argument that evaluates to true. This makes a difference if any of the arguments is a function call.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/text/template/parse/">text/template/parse&lt;/a>&lt;/p>
&lt;p>The package supports the new &lt;a href="https://go.dev/pkg/text/template/">text/template&lt;/a> and &lt;a href="https://go.dev/pkg/html/template/">html/template&lt;/a> &lt;code>{{break}}&lt;/code> command via the new constant &lt;a href="https://go.dev/pkg/text/template/parse#NodeBreak">&lt;code>NodeBreak&lt;/code>&lt;/a> and the new type &lt;a href="https://go.dev/pkg/text/template/parse#BreakNode">&lt;code>BreakNode&lt;/code>&lt;/a>, and similarly supports the new &lt;code>{{continue}}&lt;/code> command via the new constant &lt;a href="https://go.dev/pkg/text/template/parse#NodeContinue">&lt;code>NodeContinue&lt;/code>&lt;/a> and the new type &lt;a href="https://go.dev/pkg/text/template/parse#ContinueNode">&lt;code>ContinueNode&lt;/code>&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://go.dev/pkg/unicode/utf8/">unicode/utf8&lt;/a>&lt;/p>
&lt;p>The new &lt;a href="https://go.dev/pkg/unicode/utf8/#AppendRune">&lt;code>AppendRune&lt;/code>&lt;/a> function appends the UTF-8 encoding of a &lt;code>rune&lt;/code> to a &lt;code>[]byte&lt;/code>.&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a href="https://go.dev/doc/go1.18">https://go.dev/doc/go1.18&lt;/a>&lt;/p></description></item></channel></rss>